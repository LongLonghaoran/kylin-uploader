syntax = "proto3";

package api.v1;
import "google/api/annotations.proto";

option go_package = "kylin-uploader/api/v1;v1";
option java_multiple_files = true;
option java_package = "api.v1";

service Chunk {
	// 创建一次上传
	rpc CreateUpload (CreateUploadRequest) returns (CreateUploadReply){
		option (google.api.http) = {
			// 上传分片
			post: "/api/v1/uploaders",
			body: "*"
		};
	};
	// 针对一次上传对象来上传分片内容
	rpc UploadChunk (UploadChunkRequest) returns (UploadChunkReply){
		option (google.api.http) = {
			put: "/api/v1/uploaders/{upid}",
			body: "*"
		};
	};
	// 上传完成
	rpc DoneUpload (DoneUploadRequest) returns (DoneUploadReply){
		option (google.api.http) = {
			get: "/api/v1/uploaders/{upid}/done"
		};
	};
	// 检查文件是否存在
	rpc CheckFileExists (CheckFileExistRequest) returns (CheckFileExistReply){
		option (google.api.http) = {
			get: "/api/v1/check_file_exists"
		};
	}
	// 检查分片是否存在
	rpc CheckChunkExists (CheckChunkExistsRequest) returns (CheckChunkExistsReply){
		option (google.api.http) = {
			get: "/api/v1/check_chunk_exists"
		};
	}
}

message CreateUploadRequest {
	// 文件名
	string filename = 1;
	// 总分片数
	int32 total_count = 2;
	// 总容量
	int32 total_size = 3;
	// md5校验和
	string md5sum = 4;
}
message CreateUploadReply {
	// 之后用于上传分片的路径
	string upload_path = 1;
}

message UploadChunkRequest {
	//上传的upid
	string upid = 1; 
	//当前块的序号
	int32 num = 2; 
	//当前块的大小
	int32 size = 3; 
	//当前块的数据
	string chunk = 4; 
}
message UploadChunkReply {
}

message DoneUploadRequest {
	// 上传id
	string upid = 1;
}
message DoneUploadReply {
	// 返回的文件路径
	string path = 1;
}

message CheckFileExistRequest {
	// 文件名
	string filename = 1;
}
message CheckFileExistReply {
	// 是否存在
	bool exists = 1;
	// 存在则返回路径
	string path = 2;
}

message CheckChunkExistsRequest {
	// 上传id
	string upid = 1;
	// 分片序号
	int32 num = 2;
}
message CheckChunkExistsReply {
	bool exists = 1;
}