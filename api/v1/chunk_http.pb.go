// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.5
// source: api/v1/chunk.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChunkCheckChunkExists = "/api.v1.Chunk/CheckChunkExists"
const OperationChunkCheckFileExists = "/api.v1.Chunk/CheckFileExists"
const OperationChunkCreateUpload = "/api.v1.Chunk/CreateUpload"
const OperationChunkDoneUpload = "/api.v1.Chunk/DoneUpload"
const OperationChunkUploadChunk = "/api.v1.Chunk/UploadChunk"

type ChunkHTTPServer interface {
	CheckChunkExists(context.Context, *CheckChunkExistsRequest) (*CheckChunkExistsReply, error)
	CheckFileExists(context.Context, *CheckFileExistRequest) (*CheckFileExistReply, error)
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadReply, error)
	DoneUpload(context.Context, *DoneUploadRequest) (*DoneUploadReply, error)
	UploadChunk(context.Context, *UploadChunkRequest) (*UploadChunkReply, error)
}

func RegisterChunkHTTPServer(s *http.Server, srv ChunkHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/uploaders", _Chunk_CreateUpload0_HTTP_Handler(srv))
	r.PUT("/api/v1/uploaders/{upid}", _Chunk_UploadChunk0_HTTP_Handler(srv))
	r.GET("/api/v1/uploaders/{upid}/done", _Chunk_DoneUpload0_HTTP_Handler(srv))
	r.GET("/api/v1/check_file_exists", _Chunk_CheckFileExists0_HTTP_Handler(srv))
	r.GET("/api/v1/check_chunk_exists", _Chunk_CheckChunkExists0_HTTP_Handler(srv))
}

func _Chunk_CreateUpload0_HTTP_Handler(srv ChunkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChunkCreateUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUpload(ctx, req.(*CreateUploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUploadReply)
		return ctx.Result(200, reply)
	}
}

func _Chunk_UploadChunk0_HTTP_Handler(srv ChunkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadChunkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChunkUploadChunk)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadChunk(ctx, req.(*UploadChunkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadChunkReply)
		return ctx.Result(200, reply)
	}
}

func _Chunk_DoneUpload0_HTTP_Handler(srv ChunkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DoneUploadRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChunkDoneUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DoneUpload(ctx, req.(*DoneUploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DoneUploadReply)
		return ctx.Result(200, reply)
	}
}

func _Chunk_CheckFileExists0_HTTP_Handler(srv ChunkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckFileExistRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChunkCheckFileExists)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckFileExists(ctx, req.(*CheckFileExistRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckFileExistReply)
		return ctx.Result(200, reply)
	}
}

func _Chunk_CheckChunkExists0_HTTP_Handler(srv ChunkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckChunkExistsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChunkCheckChunkExists)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckChunkExists(ctx, req.(*CheckChunkExistsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckChunkExistsReply)
		return ctx.Result(200, reply)
	}
}

type ChunkHTTPClient interface {
	CheckChunkExists(ctx context.Context, req *CheckChunkExistsRequest, opts ...http.CallOption) (rsp *CheckChunkExistsReply, err error)
	CheckFileExists(ctx context.Context, req *CheckFileExistRequest, opts ...http.CallOption) (rsp *CheckFileExistReply, err error)
	CreateUpload(ctx context.Context, req *CreateUploadRequest, opts ...http.CallOption) (rsp *CreateUploadReply, err error)
	DoneUpload(ctx context.Context, req *DoneUploadRequest, opts ...http.CallOption) (rsp *DoneUploadReply, err error)
	UploadChunk(ctx context.Context, req *UploadChunkRequest, opts ...http.CallOption) (rsp *UploadChunkReply, err error)
}

type ChunkHTTPClientImpl struct {
	cc *http.Client
}

func NewChunkHTTPClient(client *http.Client) ChunkHTTPClient {
	return &ChunkHTTPClientImpl{client}
}

func (c *ChunkHTTPClientImpl) CheckChunkExists(ctx context.Context, in *CheckChunkExistsRequest, opts ...http.CallOption) (*CheckChunkExistsReply, error) {
	var out CheckChunkExistsReply
	pattern := "/api/v1/check_chunk_exists"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChunkCheckChunkExists))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChunkHTTPClientImpl) CheckFileExists(ctx context.Context, in *CheckFileExistRequest, opts ...http.CallOption) (*CheckFileExistReply, error) {
	var out CheckFileExistReply
	pattern := "/api/v1/check_file_exists"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChunkCheckFileExists))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChunkHTTPClientImpl) CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...http.CallOption) (*CreateUploadReply, error) {
	var out CreateUploadReply
	pattern := "/api/v1/uploaders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChunkCreateUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChunkHTTPClientImpl) DoneUpload(ctx context.Context, in *DoneUploadRequest, opts ...http.CallOption) (*DoneUploadReply, error) {
	var out DoneUploadReply
	pattern := "/api/v1/uploaders/{upid}/done"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChunkDoneUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChunkHTTPClientImpl) UploadChunk(ctx context.Context, in *UploadChunkRequest, opts ...http.CallOption) (*UploadChunkReply, error) {
	var out UploadChunkReply
	pattern := "/api/v1/uploaders/{upid}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChunkUploadChunk))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
